// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: atmosphere.proto

package cn.autolabor.plugin.gazebo.gazebomsgs;

public final class ProtoAtmosphere {
  private ProtoAtmosphere() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface AtmosphereOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.Atmosphere)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
     *
     * <pre>
     *&#47; &#92;brief Type of the atmosphere model.
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
     *
     * <pre>
     *&#47; &#92;brief Type of the atmosphere model.
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type getType();

    /**
     * <code>optional double temperature = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Temperature at sea level in kelvins.
     * </pre>
     */
    boolean hasTemperature();
    /**
     * <code>optional double temperature = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Temperature at sea level in kelvins.
     * </pre>
     */
    double getTemperature();

    /**
     * <code>optional double pressure = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Pressure at sea level in pascals.
     * </pre>
     */
    boolean hasPressure();
    /**
     * <code>optional double pressure = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Pressure at sea level in pascals.
     * </pre>
     */
    double getPressure();

    /**
     * <code>optional double mass_density = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
     * </pre>
     */
    boolean hasMassDensity();
    /**
     * <code>optional double mass_density = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
     * </pre>
     */
    double getMassDensity();

    /**
     * <code>optional bool enable_atmosphere = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Enable atmosphere model
     * </pre>
     */
    boolean hasEnableAtmosphere();
    /**
     * <code>optional bool enable_atmosphere = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Enable atmosphere model
     * </pre>
     */
    boolean getEnableAtmosphere();
  }
  /**
   * Protobuf type {@code gazebo.msgs.Atmosphere}
   */
  public static final class Atmosphere extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.Atmosphere)
      AtmosphereOrBuilder {
    // Use Atmosphere.newBuilder() to construct.
    private Atmosphere(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Atmosphere(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Atmosphere defaultInstance;
    public static Atmosphere getDefaultInstance() {
      return defaultInstance;
    }

    public Atmosphere getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Atmosphere(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type value = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              temperature_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              pressure_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              massDensity_ = input.readDouble();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              enableAtmosphere_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.internal_static_gazebo_msgs_Atmosphere_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.internal_static_gazebo_msgs_Atmosphere_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Builder.class);
    }

    public static com.google.protobuf.Parser<Atmosphere> PARSER =
        new com.google.protobuf.AbstractParser<Atmosphere>() {
      public Atmosphere parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Atmosphere(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Atmosphere> getParserForType() {
      return PARSER;
    }

    /**
     * Protobuf enum {@code gazebo.msgs.Atmosphere.Type}
     *
     * <pre>
     *&#47; &#92;brief Types of atmosphere models.
     * </pre>
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ADIABATIC = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Adiabatic atmosphere model.
       * </pre>
       */
      ADIABATIC(0, 1),
      ;

      /**
       * <code>ADIABATIC = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Adiabatic atmosphere model.
       * </pre>
       */
      public static final int ADIABATIC_VALUE = 1;


      public final int getNumber() { return value; }

      public static Type valueOf(int value) {
        switch (value) {
          case 1: return ADIABATIC;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.valueOf(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(index);
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int index;
      private final int value;

      private Type(int index, int value) {
        this.index = index;
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:gazebo.msgs.Atmosphere.Type)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type type_;
    /**
     * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
     *
     * <pre>
     *&#47; &#92;brief Type of the atmosphere model.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
     *
     * <pre>
     *&#47; &#92;brief Type of the atmosphere model.
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type getType() {
      return type_;
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 2;
    private double temperature_;
    /**
     * <code>optional double temperature = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Temperature at sea level in kelvins.
     * </pre>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double temperature = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Temperature at sea level in kelvins.
     * </pre>
     */
    public double getTemperature() {
      return temperature_;
    }

    public static final int PRESSURE_FIELD_NUMBER = 3;
    private double pressure_;
    /**
     * <code>optional double pressure = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Pressure at sea level in pascals.
     * </pre>
     */
    public boolean hasPressure() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double pressure = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Pressure at sea level in pascals.
     * </pre>
     */
    public double getPressure() {
      return pressure_;
    }

    public static final int MASS_DENSITY_FIELD_NUMBER = 4;
    private double massDensity_;
    /**
     * <code>optional double mass_density = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
     * </pre>
     */
    public boolean hasMassDensity() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double mass_density = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
     * </pre>
     */
    public double getMassDensity() {
      return massDensity_;
    }

    public static final int ENABLE_ATMOSPHERE_FIELD_NUMBER = 5;
    private boolean enableAtmosphere_;
    /**
     * <code>optional bool enable_atmosphere = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Enable atmosphere model
     * </pre>
     */
    public boolean hasEnableAtmosphere() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool enable_atmosphere = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Enable atmosphere model
     * </pre>
     */
    public boolean getEnableAtmosphere() {
      return enableAtmosphere_;
    }

    private void initFields() {
      type_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type.ADIABATIC;
      temperature_ = 0D;
      pressure_ = 0D;
      massDensity_ = 0D;
      enableAtmosphere_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, temperature_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, pressure_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, massDensity_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, enableAtmosphere_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, temperature_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, pressure_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, massDensity_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, enableAtmosphere_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.Atmosphere}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.Atmosphere)
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.AtmosphereOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.internal_static_gazebo_msgs_Atmosphere_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.internal_static_gazebo_msgs_Atmosphere_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Builder.class);
      }

      // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoAtmosphere.Atmosphere.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type.ADIABATIC;
        bitField0_ = (bitField0_ & ~0x00000001);
        temperature_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        pressure_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        massDensity_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        enableAtmosphere_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.internal_static_gazebo_msgs_Atmosphere_descriptor;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere getDefaultInstanceForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.getDefaultInstance();
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere build() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere buildPartial() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.temperature_ = temperature_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pressure_ = pressure_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.massDensity_ = massDensity_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.enableAtmosphere_ = enableAtmosphere_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere) {
          return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere other) {
        if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasTemperature()) {
          setTemperature(other.getTemperature());
        }
        if (other.hasPressure()) {
          setPressure(other.getPressure());
        }
        if (other.hasMassDensity()) {
          setMassDensity(other.getMassDensity());
        }
        if (other.hasEnableAtmosphere()) {
          setEnableAtmosphere(other.getEnableAtmosphere());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type type_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type.ADIABATIC;
      /**
       * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
       *
       * <pre>
       *&#47; &#92;brief Type of the atmosphere model.
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
       *
       * <pre>
       *&#47; &#92;brief Type of the atmosphere model.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type getType() {
        return type_;
      }
      /**
       * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
       *
       * <pre>
       *&#47; &#92;brief Type of the atmosphere model.
       * </pre>
       */
      public Builder setType(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Atmosphere.Type type = 1 [default = ADIABATIC];</code>
       *
       * <pre>
       *&#47; &#92;brief Type of the atmosphere model.
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoAtmosphere.Atmosphere.Type.ADIABATIC;
        onChanged();
        return this;
      }

      private double temperature_ ;
      /**
       * <code>optional double temperature = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Temperature at sea level in kelvins.
       * </pre>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double temperature = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Temperature at sea level in kelvins.
       * </pre>
       */
      public double getTemperature() {
        return temperature_;
      }
      /**
       * <code>optional double temperature = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Temperature at sea level in kelvins.
       * </pre>
       */
      public Builder setTemperature(double value) {
        bitField0_ |= 0x00000002;
        temperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double temperature = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Temperature at sea level in kelvins.
       * </pre>
       */
      public Builder clearTemperature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        temperature_ = 0D;
        onChanged();
        return this;
      }

      private double pressure_ ;
      /**
       * <code>optional double pressure = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Pressure at sea level in pascals.
       * </pre>
       */
      public boolean hasPressure() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double pressure = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Pressure at sea level in pascals.
       * </pre>
       */
      public double getPressure() {
        return pressure_;
      }
      /**
       * <code>optional double pressure = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Pressure at sea level in pascals.
       * </pre>
       */
      public Builder setPressure(double value) {
        bitField0_ |= 0x00000004;
        pressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double pressure = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Pressure at sea level in pascals.
       * </pre>
       */
      public Builder clearPressure() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pressure_ = 0D;
        onChanged();
        return this;
      }

      private double massDensity_ ;
      /**
       * <code>optional double mass_density = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
       * </pre>
       */
      public boolean hasMassDensity() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double mass_density = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
       * </pre>
       */
      public double getMassDensity() {
        return massDensity_;
      }
      /**
       * <code>optional double mass_density = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
       * </pre>
       */
      public Builder setMassDensity(double value) {
        bitField0_ |= 0x00000008;
        massDensity_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double mass_density = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Mass density of the air at sea level in kg/m^3.
       * </pre>
       */
      public Builder clearMassDensity() {
        bitField0_ = (bitField0_ & ~0x00000008);
        massDensity_ = 0D;
        onChanged();
        return this;
      }

      private boolean enableAtmosphere_ ;
      /**
       * <code>optional bool enable_atmosphere = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Enable atmosphere model
       * </pre>
       */
      public boolean hasEnableAtmosphere() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool enable_atmosphere = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Enable atmosphere model
       * </pre>
       */
      public boolean getEnableAtmosphere() {
        return enableAtmosphere_;
      }
      /**
       * <code>optional bool enable_atmosphere = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Enable atmosphere model
       * </pre>
       */
      public Builder setEnableAtmosphere(boolean value) {
        bitField0_ |= 0x00000010;
        enableAtmosphere_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enable_atmosphere = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Enable atmosphere model
       * </pre>
       */
      public Builder clearEnableAtmosphere() {
        bitField0_ = (bitField0_ & ~0x00000010);
        enableAtmosphere_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.Atmosphere)
    }

    static {
      defaultInstance = new Atmosphere(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.Atmosphere)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_Atmosphere_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_Atmosphere_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020atmosphere.proto\022\013gazebo.msgs\"\262\001\n\nAtmo" +
      "sphere\0225\n\004type\030\001 \001(\0162\034.gazebo.msgs.Atmos" +
      "phere.Type:\tADIABATIC\022\023\n\013temperature\030\002 \001" +
      "(\001\022\020\n\010pressure\030\003 \001(\001\022\024\n\014mass_density\030\004 \001" +
      "(\001\022\031\n\021enable_atmosphere\030\005 \001(\010\"\025\n\004Type\022\r\n" +
      "\tADIABATIC\020\001B2\n\037cn.autolabor.plugin.gaze" +
      "bo.msgsB\017ProtoAtmosphere"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_gazebo_msgs_Atmosphere_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_Atmosphere_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_Atmosphere_descriptor,
        new java.lang.String[] { "Type", "Temperature", "Pressure", "MassDensity", "EnableAtmosphere", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
