// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cessna.proto

package cn.autolabor.plugin.gazebo.gazebomsgs;

public final class ProtoCessna {
  private ProtoCessna() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface CessnaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.Cessna)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional float propeller_speed = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     */
    boolean hasPropellerSpeed();
    /**
     * <code>optional float propeller_speed = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     */
    float getPropellerSpeed();

    /**
     * <code>optional float left_aileron = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     */
    boolean hasLeftAileron();
    /**
     * <code>optional float left_aileron = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     */
    float getLeftAileron();

    /**
     * <code>optional float left_flap = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     */
    boolean hasLeftFlap();
    /**
     * <code>optional float left_flap = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     */
    float getLeftFlap();

    /**
     * <code>optional float right_aileron = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     */
    boolean hasRightAileron();
    /**
     * <code>optional float right_aileron = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     */
    float getRightAileron();

    /**
     * <code>optional float right_flap = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     */
    boolean hasRightFlap();
    /**
     * <code>optional float right_flap = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     */
    float getRightFlap();

    /**
     * <code>optional float elevators = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     */
    boolean hasElevators();
    /**
     * <code>optional float elevators = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     */
    float getElevators();

    /**
     * <code>optional float rudder = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     */
    boolean hasRudder();
    /**
     * <code>optional float rudder = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     */
    float getRudder();

    /**
     * <code>optional float cmd_propeller_speed = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     */
    boolean hasCmdPropellerSpeed();
    /**
     * <code>optional float cmd_propeller_speed = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     */
    float getCmdPropellerSpeed();

    /**
     * <code>optional float cmd_left_aileron = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     */
    boolean hasCmdLeftAileron();
    /**
     * <code>optional float cmd_left_aileron = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     */
    float getCmdLeftAileron();

    /**
     * <code>optional float cmd_left_flap = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     */
    boolean hasCmdLeftFlap();
    /**
     * <code>optional float cmd_left_flap = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     */
    float getCmdLeftFlap();

    /**
     * <code>optional float cmd_right_aileron = 11;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     */
    boolean hasCmdRightAileron();
    /**
     * <code>optional float cmd_right_aileron = 11;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     */
    float getCmdRightAileron();

    /**
     * <code>optional float cmd_right_flap = 12;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     */
    boolean hasCmdRightFlap();
    /**
     * <code>optional float cmd_right_flap = 12;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     */
    float getCmdRightFlap();

    /**
     * <code>optional float cmd_elevators = 13;</code>
     *
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     */
    boolean hasCmdElevators();
    /**
     * <code>optional float cmd_elevators = 13;</code>
     *
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     */
    float getCmdElevators();

    /**
     * <code>optional float cmd_rudder = 14;</code>
     *
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     */
    boolean hasCmdRudder();
    /**
     * <code>optional float cmd_rudder = 14;</code>
     *
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     */
    float getCmdRudder();
  }
  /**
   * Protobuf type {@code gazebo.msgs.Cessna}
   */
  public static final class Cessna extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.Cessna)
      CessnaOrBuilder {
    // Use Cessna.newBuilder() to construct.
    private Cessna(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Cessna(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Cessna defaultInstance;
    public static Cessna getDefaultInstance() {
      return defaultInstance;
    }

    public Cessna getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Cessna(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              propellerSpeed_ = input.readFloat();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              leftAileron_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              leftFlap_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              rightAileron_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              rightFlap_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              elevators_ = input.readFloat();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              rudder_ = input.readFloat();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              cmdPropellerSpeed_ = input.readFloat();
              break;
            }
            case 77: {
              bitField0_ |= 0x00000100;
              cmdLeftAileron_ = input.readFloat();
              break;
            }
            case 85: {
              bitField0_ |= 0x00000200;
              cmdLeftFlap_ = input.readFloat();
              break;
            }
            case 93: {
              bitField0_ |= 0x00000400;
              cmdRightAileron_ = input.readFloat();
              break;
            }
            case 101: {
              bitField0_ |= 0x00000800;
              cmdRightFlap_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00001000;
              cmdElevators_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00002000;
              cmdRudder_ = input.readFloat();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.internal_static_gazebo_msgs_Cessna_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.internal_static_gazebo_msgs_Cessna_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna.Builder.class);
    }

    public static com.google.protobuf.Parser<Cessna> PARSER =
        new com.google.protobuf.AbstractParser<Cessna>() {
      public Cessna parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Cessna(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Cessna> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PROPELLER_SPEED_FIELD_NUMBER = 1;
    private float propellerSpeed_;
    /**
     * <code>optional float propeller_speed = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     */
    public boolean hasPropellerSpeed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional float propeller_speed = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Current RPM of the propeller.
     * </pre>
     */
    public float getPropellerSpeed() {
      return propellerSpeed_;
    }

    public static final int LEFT_AILERON_FIELD_NUMBER = 2;
    private float leftAileron_;
    /**
     * <code>optional float left_aileron = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     */
    public boolean hasLeftAileron() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional float left_aileron = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left aileron angle in rads.
     * </pre>
     */
    public float getLeftAileron() {
      return leftAileron_;
    }

    public static final int LEFT_FLAP_FIELD_NUMBER = 3;
    private float leftFlap_;
    /**
     * <code>optional float left_flap = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     */
    public boolean hasLeftFlap() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional float left_flap = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Current left flap angle in rads.
     * </pre>
     */
    public float getLeftFlap() {
      return leftFlap_;
    }

    public static final int RIGHT_AILERON_FIELD_NUMBER = 4;
    private float rightAileron_;
    /**
     * <code>optional float right_aileron = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     */
    public boolean hasRightAileron() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional float right_aileron = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right aileron angle in rads.
     * </pre>
     */
    public float getRightAileron() {
      return rightAileron_;
    }

    public static final int RIGHT_FLAP_FIELD_NUMBER = 5;
    private float rightFlap_;
    /**
     * <code>optional float right_flap = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     */
    public boolean hasRightFlap() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional float right_flap = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Current right flap angle in rads.
     * </pre>
     */
    public float getRightFlap() {
      return rightFlap_;
    }

    public static final int ELEVATORS_FIELD_NUMBER = 6;
    private float elevators_;
    /**
     * <code>optional float elevators = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     */
    public boolean hasElevators() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float elevators = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Current elevators angle in rads.
     * </pre>
     */
    public float getElevators() {
      return elevators_;
    }

    public static final int RUDDER_FIELD_NUMBER = 7;
    private float rudder_;
    /**
     * <code>optional float rudder = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     */
    public boolean hasRudder() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional float rudder = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Current ruddle angle in rads.
     * </pre>
     */
    public float getRudder() {
      return rudder_;
    }

    public static final int CMD_PROPELLER_SPEED_FIELD_NUMBER = 8;
    private float cmdPropellerSpeed_;
    /**
     * <code>optional float cmd_propeller_speed = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     */
    public boolean hasCmdPropellerSpeed() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float cmd_propeller_speed = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Target RPM of the propeller.
     * </pre>
     */
    public float getCmdPropellerSpeed() {
      return cmdPropellerSpeed_;
    }

    public static final int CMD_LEFT_AILERON_FIELD_NUMBER = 9;
    private float cmdLeftAileron_;
    /**
     * <code>optional float cmd_left_aileron = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     */
    public boolean hasCmdLeftAileron() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float cmd_left_aileron = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left aileron angle in rads.
     * </pre>
     */
    public float getCmdLeftAileron() {
      return cmdLeftAileron_;
    }

    public static final int CMD_LEFT_FLAP_FIELD_NUMBER = 10;
    private float cmdLeftFlap_;
    /**
     * <code>optional float cmd_left_flap = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     */
    public boolean hasCmdLeftFlap() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float cmd_left_flap = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Target left flap angle in rads.
     * </pre>
     */
    public float getCmdLeftFlap() {
      return cmdLeftFlap_;
    }

    public static final int CMD_RIGHT_AILERON_FIELD_NUMBER = 11;
    private float cmdRightAileron_;
    /**
     * <code>optional float cmd_right_aileron = 11;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     */
    public boolean hasCmdRightAileron() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float cmd_right_aileron = 11;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right aileron angle in rads.
     * </pre>
     */
    public float getCmdRightAileron() {
      return cmdRightAileron_;
    }

    public static final int CMD_RIGHT_FLAP_FIELD_NUMBER = 12;
    private float cmdRightFlap_;
    /**
     * <code>optional float cmd_right_flap = 12;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     */
    public boolean hasCmdRightFlap() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float cmd_right_flap = 12;</code>
     *
     * <pre>
     *&#47; &#92;brief Target right flap angle in rads.
     * </pre>
     */
    public float getCmdRightFlap() {
      return cmdRightFlap_;
    }

    public static final int CMD_ELEVATORS_FIELD_NUMBER = 13;
    private float cmdElevators_;
    /**
     * <code>optional float cmd_elevators = 13;</code>
     *
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     */
    public boolean hasCmdElevators() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float cmd_elevators = 13;</code>
     *
     * <pre>
     *&#47; &#92;brief Target elevators angle in rads.
     * </pre>
     */
    public float getCmdElevators() {
      return cmdElevators_;
    }

    public static final int CMD_RUDDER_FIELD_NUMBER = 14;
    private float cmdRudder_;
    /**
     * <code>optional float cmd_rudder = 14;</code>
     *
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     */
    public boolean hasCmdRudder() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float cmd_rudder = 14;</code>
     *
     * <pre>
     *&#47; &#92;brief Target ruddle angle in rads.
     * </pre>
     */
    public float getCmdRudder() {
      return cmdRudder_;
    }

    private void initFields() {
      propellerSpeed_ = 0F;
      leftAileron_ = 0F;
      leftFlap_ = 0F;
      rightAileron_ = 0F;
      rightFlap_ = 0F;
      elevators_ = 0F;
      rudder_ = 0F;
      cmdPropellerSpeed_ = 0F;
      cmdLeftAileron_ = 0F;
      cmdLeftFlap_ = 0F;
      cmdRightAileron_ = 0F;
      cmdRightFlap_ = 0F;
      cmdElevators_ = 0F;
      cmdRudder_ = 0F;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFloat(1, propellerSpeed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, leftAileron_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, leftFlap_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, rightAileron_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, rightFlap_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, elevators_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFloat(7, rudder_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(8, cmdPropellerSpeed_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(9, cmdLeftAileron_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(10, cmdLeftFlap_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(11, cmdRightAileron_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(12, cmdRightFlap_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(13, cmdElevators_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(14, cmdRudder_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(1, propellerSpeed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, leftAileron_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, leftFlap_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, rightAileron_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, rightFlap_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, elevators_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, rudder_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(8, cmdPropellerSpeed_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(9, cmdLeftAileron_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, cmdLeftFlap_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(11, cmdRightAileron_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, cmdRightFlap_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, cmdElevators_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, cmdRudder_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.Cessna}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.Cessna)
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.CessnaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.internal_static_gazebo_msgs_Cessna_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.internal_static_gazebo_msgs_Cessna_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna.Builder.class);
      }

      // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoCessna.Cessna.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        propellerSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000001);
        leftAileron_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        leftFlap_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        rightAileron_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        rightFlap_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        elevators_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        rudder_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        cmdPropellerSpeed_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000080);
        cmdLeftAileron_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000100);
        cmdLeftFlap_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        cmdRightAileron_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000400);
        cmdRightFlap_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        cmdElevators_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        cmdRudder_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.internal_static_gazebo_msgs_Cessna_descriptor;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna getDefaultInstanceForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna.getDefaultInstance();
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna build() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna buildPartial() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.propellerSpeed_ = propellerSpeed_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.leftAileron_ = leftAileron_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.leftFlap_ = leftFlap_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rightAileron_ = rightAileron_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.rightFlap_ = rightFlap_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.elevators_ = elevators_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rudder_ = rudder_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.cmdPropellerSpeed_ = cmdPropellerSpeed_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.cmdLeftAileron_ = cmdLeftAileron_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.cmdLeftFlap_ = cmdLeftFlap_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.cmdRightAileron_ = cmdRightAileron_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.cmdRightFlap_ = cmdRightFlap_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.cmdElevators_ = cmdElevators_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.cmdRudder_ = cmdRudder_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna) {
          return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna other) {
        if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna.getDefaultInstance()) return this;
        if (other.hasPropellerSpeed()) {
          setPropellerSpeed(other.getPropellerSpeed());
        }
        if (other.hasLeftAileron()) {
          setLeftAileron(other.getLeftAileron());
        }
        if (other.hasLeftFlap()) {
          setLeftFlap(other.getLeftFlap());
        }
        if (other.hasRightAileron()) {
          setRightAileron(other.getRightAileron());
        }
        if (other.hasRightFlap()) {
          setRightFlap(other.getRightFlap());
        }
        if (other.hasElevators()) {
          setElevators(other.getElevators());
        }
        if (other.hasRudder()) {
          setRudder(other.getRudder());
        }
        if (other.hasCmdPropellerSpeed()) {
          setCmdPropellerSpeed(other.getCmdPropellerSpeed());
        }
        if (other.hasCmdLeftAileron()) {
          setCmdLeftAileron(other.getCmdLeftAileron());
        }
        if (other.hasCmdLeftFlap()) {
          setCmdLeftFlap(other.getCmdLeftFlap());
        }
        if (other.hasCmdRightAileron()) {
          setCmdRightAileron(other.getCmdRightAileron());
        }
        if (other.hasCmdRightFlap()) {
          setCmdRightFlap(other.getCmdRightFlap());
        }
        if (other.hasCmdElevators()) {
          setCmdElevators(other.getCmdElevators());
        }
        if (other.hasCmdRudder()) {
          setCmdRudder(other.getCmdRudder());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoCessna.Cessna) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private float propellerSpeed_ ;
      /**
       * <code>optional float propeller_speed = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       */
      public boolean hasPropellerSpeed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional float propeller_speed = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       */
      public float getPropellerSpeed() {
        return propellerSpeed_;
      }
      /**
       * <code>optional float propeller_speed = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       */
      public Builder setPropellerSpeed(float value) {
        bitField0_ |= 0x00000001;
        propellerSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float propeller_speed = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Current RPM of the propeller.
       * </pre>
       */
      public Builder clearPropellerSpeed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        propellerSpeed_ = 0F;
        onChanged();
        return this;
      }

      private float leftAileron_ ;
      /**
       * <code>optional float left_aileron = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       */
      public boolean hasLeftAileron() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional float left_aileron = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       */
      public float getLeftAileron() {
        return leftAileron_;
      }
      /**
       * <code>optional float left_aileron = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       */
      public Builder setLeftAileron(float value) {
        bitField0_ |= 0x00000002;
        leftAileron_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float left_aileron = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left aileron angle in rads.
       * </pre>
       */
      public Builder clearLeftAileron() {
        bitField0_ = (bitField0_ & ~0x00000002);
        leftAileron_ = 0F;
        onChanged();
        return this;
      }

      private float leftFlap_ ;
      /**
       * <code>optional float left_flap = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       */
      public boolean hasLeftFlap() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional float left_flap = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       */
      public float getLeftFlap() {
        return leftFlap_;
      }
      /**
       * <code>optional float left_flap = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       */
      public Builder setLeftFlap(float value) {
        bitField0_ |= 0x00000004;
        leftFlap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float left_flap = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Current left flap angle in rads.
       * </pre>
       */
      public Builder clearLeftFlap() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leftFlap_ = 0F;
        onChanged();
        return this;
      }

      private float rightAileron_ ;
      /**
       * <code>optional float right_aileron = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       */
      public boolean hasRightAileron() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional float right_aileron = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       */
      public float getRightAileron() {
        return rightAileron_;
      }
      /**
       * <code>optional float right_aileron = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       */
      public Builder setRightAileron(float value) {
        bitField0_ |= 0x00000008;
        rightAileron_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float right_aileron = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right aileron angle in rads.
       * </pre>
       */
      public Builder clearRightAileron() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rightAileron_ = 0F;
        onChanged();
        return this;
      }

      private float rightFlap_ ;
      /**
       * <code>optional float right_flap = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       */
      public boolean hasRightFlap() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional float right_flap = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       */
      public float getRightFlap() {
        return rightFlap_;
      }
      /**
       * <code>optional float right_flap = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       */
      public Builder setRightFlap(float value) {
        bitField0_ |= 0x00000010;
        rightFlap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float right_flap = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Current right flap angle in rads.
       * </pre>
       */
      public Builder clearRightFlap() {
        bitField0_ = (bitField0_ & ~0x00000010);
        rightFlap_ = 0F;
        onChanged();
        return this;
      }

      private float elevators_ ;
      /**
       * <code>optional float elevators = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       */
      public boolean hasElevators() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional float elevators = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       */
      public float getElevators() {
        return elevators_;
      }
      /**
       * <code>optional float elevators = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       */
      public Builder setElevators(float value) {
        bitField0_ |= 0x00000020;
        elevators_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float elevators = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Current elevators angle in rads.
       * </pre>
       */
      public Builder clearElevators() {
        bitField0_ = (bitField0_ & ~0x00000020);
        elevators_ = 0F;
        onChanged();
        return this;
      }

      private float rudder_ ;
      /**
       * <code>optional float rudder = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       */
      public boolean hasRudder() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float rudder = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       */
      public float getRudder() {
        return rudder_;
      }
      /**
       * <code>optional float rudder = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       */
      public Builder setRudder(float value) {
        bitField0_ |= 0x00000040;
        rudder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float rudder = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Current ruddle angle in rads.
       * </pre>
       */
      public Builder clearRudder() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rudder_ = 0F;
        onChanged();
        return this;
      }

      private float cmdPropellerSpeed_ ;
      /**
       * <code>optional float cmd_propeller_speed = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       */
      public boolean hasCmdPropellerSpeed() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional float cmd_propeller_speed = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       */
      public float getCmdPropellerSpeed() {
        return cmdPropellerSpeed_;
      }
      /**
       * <code>optional float cmd_propeller_speed = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       */
      public Builder setCmdPropellerSpeed(float value) {
        bitField0_ |= 0x00000080;
        cmdPropellerSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_propeller_speed = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Target RPM of the propeller.
       * </pre>
       */
      public Builder clearCmdPropellerSpeed() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cmdPropellerSpeed_ = 0F;
        onChanged();
        return this;
      }

      private float cmdLeftAileron_ ;
      /**
       * <code>optional float cmd_left_aileron = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       */
      public boolean hasCmdLeftAileron() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional float cmd_left_aileron = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       */
      public float getCmdLeftAileron() {
        return cmdLeftAileron_;
      }
      /**
       * <code>optional float cmd_left_aileron = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       */
      public Builder setCmdLeftAileron(float value) {
        bitField0_ |= 0x00000100;
        cmdLeftAileron_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_left_aileron = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left aileron angle in rads.
       * </pre>
       */
      public Builder clearCmdLeftAileron() {
        bitField0_ = (bitField0_ & ~0x00000100);
        cmdLeftAileron_ = 0F;
        onChanged();
        return this;
      }

      private float cmdLeftFlap_ ;
      /**
       * <code>optional float cmd_left_flap = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       */
      public boolean hasCmdLeftFlap() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float cmd_left_flap = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       */
      public float getCmdLeftFlap() {
        return cmdLeftFlap_;
      }
      /**
       * <code>optional float cmd_left_flap = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       */
      public Builder setCmdLeftFlap(float value) {
        bitField0_ |= 0x00000200;
        cmdLeftFlap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_left_flap = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Target left flap angle in rads.
       * </pre>
       */
      public Builder clearCmdLeftFlap() {
        bitField0_ = (bitField0_ & ~0x00000200);
        cmdLeftFlap_ = 0F;
        onChanged();
        return this;
      }

      private float cmdRightAileron_ ;
      /**
       * <code>optional float cmd_right_aileron = 11;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       */
      public boolean hasCmdRightAileron() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional float cmd_right_aileron = 11;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       */
      public float getCmdRightAileron() {
        return cmdRightAileron_;
      }
      /**
       * <code>optional float cmd_right_aileron = 11;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       */
      public Builder setCmdRightAileron(float value) {
        bitField0_ |= 0x00000400;
        cmdRightAileron_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_right_aileron = 11;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right aileron angle in rads.
       * </pre>
       */
      public Builder clearCmdRightAileron() {
        bitField0_ = (bitField0_ & ~0x00000400);
        cmdRightAileron_ = 0F;
        onChanged();
        return this;
      }

      private float cmdRightFlap_ ;
      /**
       * <code>optional float cmd_right_flap = 12;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       */
      public boolean hasCmdRightFlap() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float cmd_right_flap = 12;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       */
      public float getCmdRightFlap() {
        return cmdRightFlap_;
      }
      /**
       * <code>optional float cmd_right_flap = 12;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       */
      public Builder setCmdRightFlap(float value) {
        bitField0_ |= 0x00000800;
        cmdRightFlap_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_right_flap = 12;</code>
       *
       * <pre>
       *&#47; &#92;brief Target right flap angle in rads.
       * </pre>
       */
      public Builder clearCmdRightFlap() {
        bitField0_ = (bitField0_ & ~0x00000800);
        cmdRightFlap_ = 0F;
        onChanged();
        return this;
      }

      private float cmdElevators_ ;
      /**
       * <code>optional float cmd_elevators = 13;</code>
       *
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       */
      public boolean hasCmdElevators() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float cmd_elevators = 13;</code>
       *
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       */
      public float getCmdElevators() {
        return cmdElevators_;
      }
      /**
       * <code>optional float cmd_elevators = 13;</code>
       *
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       */
      public Builder setCmdElevators(float value) {
        bitField0_ |= 0x00001000;
        cmdElevators_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_elevators = 13;</code>
       *
       * <pre>
       *&#47; &#92;brief Target elevators angle in rads.
       * </pre>
       */
      public Builder clearCmdElevators() {
        bitField0_ = (bitField0_ & ~0x00001000);
        cmdElevators_ = 0F;
        onChanged();
        return this;
      }

      private float cmdRudder_ ;
      /**
       * <code>optional float cmd_rudder = 14;</code>
       *
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       */
      public boolean hasCmdRudder() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float cmd_rudder = 14;</code>
       *
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       */
      public float getCmdRudder() {
        return cmdRudder_;
      }
      /**
       * <code>optional float cmd_rudder = 14;</code>
       *
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       */
      public Builder setCmdRudder(float value) {
        bitField0_ |= 0x00002000;
        cmdRudder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float cmd_rudder = 14;</code>
       *
       * <pre>
       *&#47; &#92;brief Target ruddle angle in rads.
       * </pre>
       */
      public Builder clearCmdRudder() {
        bitField0_ = (bitField0_ & ~0x00002000);
        cmdRudder_ = 0F;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.Cessna)
    }

    static {
      defaultInstance = new Cessna(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.Cessna)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_Cessna_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_Cessna_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014cessna.proto\022\013gazebo.msgs\"\304\002\n\006Cessna\022\027" +
      "\n\017propeller_speed\030\001 \001(\002\022\024\n\014left_aileron\030" +
      "\002 \001(\002\022\021\n\tleft_flap\030\003 \001(\002\022\025\n\rright_ailero" +
      "n\030\004 \001(\002\022\022\n\nright_flap\030\005 \001(\002\022\021\n\televators" +
      "\030\006 \001(\002\022\016\n\006rudder\030\007 \001(\002\022\033\n\023cmd_propeller_" +
      "speed\030\010 \001(\002\022\030\n\020cmd_left_aileron\030\t \001(\002\022\025\n" +
      "\rcmd_left_flap\030\n \001(\002\022\031\n\021cmd_right_ailero" +
      "n\030\013 \001(\002\022\026\n\016cmd_right_flap\030\014 \001(\002\022\025\n\rcmd_e" +
      "levators\030\r \001(\002\022\022\n\ncmd_rudder\030\016 \001(\002B.\n\037cn" +
      ".autolabor.plugin.gazebo.msgsB\013ProtoCess",
      "na"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_gazebo_msgs_Cessna_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_Cessna_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_Cessna_descriptor,
        new java.lang.String[] { "PropellerSpeed", "LeftAileron", "LeftFlap", "RightAileron", "RightFlap", "Elevators", "Rudder", "CmdPropellerSpeed", "CmdLeftAileron", "CmdLeftFlap", "CmdRightAileron", "CmdRightFlap", "CmdElevators", "CmdRudder", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
