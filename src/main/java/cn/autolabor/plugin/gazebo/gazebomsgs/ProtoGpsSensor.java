// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps_sensor.proto

package cn.autolabor.plugin.gazebo.gazebomsgs;

public final class ProtoGpsSensor {
  private ProtoGpsSensor() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GPSSensorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.GPSSensor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getPosition();
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder getPositionOrBuilder();

    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    boolean hasVelocity();
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getVelocity();
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder getVelocityOrBuilder();
  }
  /**
   * Protobuf type {@code gazebo.msgs.GPSSensor}
   */
  public static final class GPSSensor extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.GPSSensor)
      GPSSensorOrBuilder {
    // Use GPSSensor.newBuilder() to construct.
    private GPSSensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GPSSensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GPSSensor defaultInstance;
    public static GPSSensor getDefaultInstance() {
      return defaultInstance;
    }

    public GPSSensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GPSSensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = position_.toBuilder();
              }
              position_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(position_);
                position_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = velocity_.toBuilder();
              }
              velocity_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(velocity_);
                velocity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Builder.class);
    }

    public static com.google.protobuf.Parser<GPSSensor> PARSER =
        new com.google.protobuf.AbstractParser<GPSSensor>() {
      public GPSSensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GPSSensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GPSSensor> getParserForType() {
      return PARSER;
    }

    public interface SensingOrBuilder extends
        // @@protoc_insertion_point(interface_extends:gazebo.msgs.GPSSensor.Sensing)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal noise
       * </pre>
       */
      boolean hasHorizontalNoise();
      /**
       * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal noise
       * </pre>
       */
      cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise getHorizontalNoise();
      /**
       * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal noise
       * </pre>
       */
      cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder getHorizontalNoiseOrBuilder();

      /**
       * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Vertical noise
       * </pre>
       */
      boolean hasVerticalNoise();
      /**
       * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Vertical noise
       * </pre>
       */
      cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise getVerticalNoise();
      /**
       * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Vertical noise
       * </pre>
       */
      cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder getVerticalNoiseOrBuilder();
    }
    /**
     * Protobuf type {@code gazebo.msgs.GPSSensor.Sensing}
     *
     * <pre>
     *&#47; &#92;brief Sensing information
     * </pre>
     */
    public static final class Sensing extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:gazebo.msgs.GPSSensor.Sensing)
        SensingOrBuilder {
      // Use Sensing.newBuilder() to construct.
      private Sensing(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Sensing(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Sensing defaultInstance;
      public static Sensing getDefaultInstance() {
        return defaultInstance;
      }

      public Sensing getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Sensing(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = horizontalNoise_.toBuilder();
                }
                horizontalNoise_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(horizontalNoise_);
                  horizontalNoise_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = verticalNoise_.toBuilder();
                }
                verticalNoise_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(verticalNoise_);
                  verticalNoise_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_Sensing_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_Sensing_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder.class);
      }

      public static com.google.protobuf.Parser<Sensing> PARSER =
          new com.google.protobuf.AbstractParser<Sensing>() {
        public Sensing parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Sensing(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Sensing> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int HORIZONTAL_NOISE_FIELD_NUMBER = 1;
      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise horizontalNoise_;
      /**
       * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal noise
       * </pre>
       */
      public boolean hasHorizontalNoise() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal noise
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise getHorizontalNoise() {
        return horizontalNoise_;
      }
      /**
       * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal noise
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder getHorizontalNoiseOrBuilder() {
        return horizontalNoise_;
      }

      public static final int VERTICAL_NOISE_FIELD_NUMBER = 2;
      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise verticalNoise_;
      /**
       * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Vertical noise
       * </pre>
       */
      public boolean hasVerticalNoise() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Vertical noise
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise getVerticalNoise() {
        return verticalNoise_;
      }
      /**
       * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Vertical noise
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder getVerticalNoiseOrBuilder() {
        return verticalNoise_;
      }

      private void initFields() {
        horizontalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
        verticalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasHorizontalNoise()) {
          if (!getHorizontalNoise().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        if (hasVerticalNoise()) {
          if (!getVerticalNoise().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, horizontalNoise_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, verticalNoise_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, horizontalNoise_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, verticalNoise_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code gazebo.msgs.GPSSensor.Sensing}
       *
       * <pre>
       *&#47; &#92;brief Sensing information
       * </pre>
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:gazebo.msgs.GPSSensor.Sensing)
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_Sensing_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_Sensing_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder.class);
        }

        // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoGpsSensor.GPSSensor.Sensing.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getHorizontalNoiseFieldBuilder();
            getVerticalNoiseFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (horizontalNoiseBuilder_ == null) {
            horizontalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
          } else {
            horizontalNoiseBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (verticalNoiseBuilder_ == null) {
            verticalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
          } else {
            verticalNoiseBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_Sensing_descriptor;
        }

        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getDefaultInstanceForType() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
        }

        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing build() {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing buildPartial() {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (horizontalNoiseBuilder_ == null) {
            result.horizontalNoise_ = horizontalNoise_;
          } else {
            result.horizontalNoise_ = horizontalNoiseBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (verticalNoiseBuilder_ == null) {
            result.verticalNoise_ = verticalNoise_;
          } else {
            result.verticalNoise_ = verticalNoiseBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing) {
            return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing other) {
          if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance()) return this;
          if (other.hasHorizontalNoise()) {
            mergeHorizontalNoise(other.getHorizontalNoise());
          }
          if (other.hasVerticalNoise()) {
            mergeVerticalNoise(other.getVerticalNoise());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (hasHorizontalNoise()) {
            if (!getHorizontalNoise().isInitialized()) {
              
              return false;
            }
          }
          if (hasVerticalNoise()) {
            if (!getVerticalNoise().isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise horizontalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder> horizontalNoiseBuilder_;
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public boolean hasHorizontalNoise() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise getHorizontalNoise() {
          if (horizontalNoiseBuilder_ == null) {
            return horizontalNoise_;
          } else {
            return horizontalNoiseBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public Builder setHorizontalNoise(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise value) {
          if (horizontalNoiseBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            horizontalNoise_ = value;
            onChanged();
          } else {
            horizontalNoiseBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public Builder setHorizontalNoise(
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder builderForValue) {
          if (horizontalNoiseBuilder_ == null) {
            horizontalNoise_ = builderForValue.build();
            onChanged();
          } else {
            horizontalNoiseBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public Builder mergeHorizontalNoise(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise value) {
          if (horizontalNoiseBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                horizontalNoise_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance()) {
              horizontalNoise_ =
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.newBuilder(horizontalNoise_).mergeFrom(value).buildPartial();
            } else {
              horizontalNoise_ = value;
            }
            onChanged();
          } else {
            horizontalNoiseBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public Builder clearHorizontalNoise() {
          if (horizontalNoiseBuilder_ == null) {
            horizontalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
            onChanged();
          } else {
            horizontalNoiseBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder getHorizontalNoiseBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getHorizontalNoiseFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder getHorizontalNoiseOrBuilder() {
          if (horizontalNoiseBuilder_ != null) {
            return horizontalNoiseBuilder_.getMessageOrBuilder();
          } else {
            return horizontalNoise_;
          }
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise horizontal_noise = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Horizontal noise
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder>
            getHorizontalNoiseFieldBuilder() {
          if (horizontalNoiseBuilder_ == null) {
            horizontalNoiseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder>(
                    getHorizontalNoise(),
                    getParentForChildren(),
                    isClean());
            horizontalNoise_ = null;
          }
          return horizontalNoiseBuilder_;
        }

        private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise verticalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder> verticalNoiseBuilder_;
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public boolean hasVerticalNoise() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise getVerticalNoise() {
          if (verticalNoiseBuilder_ == null) {
            return verticalNoise_;
          } else {
            return verticalNoiseBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public Builder setVerticalNoise(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise value) {
          if (verticalNoiseBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            verticalNoise_ = value;
            onChanged();
          } else {
            verticalNoiseBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public Builder setVerticalNoise(
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder builderForValue) {
          if (verticalNoiseBuilder_ == null) {
            verticalNoise_ = builderForValue.build();
            onChanged();
          } else {
            verticalNoiseBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public Builder mergeVerticalNoise(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise value) {
          if (verticalNoiseBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                verticalNoise_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance()) {
              verticalNoise_ =
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.newBuilder(verticalNoise_).mergeFrom(value).buildPartial();
            } else {
              verticalNoise_ = value;
            }
            onChanged();
          } else {
            verticalNoiseBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public Builder clearVerticalNoise() {
          if (verticalNoiseBuilder_ == null) {
            verticalNoise_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.getDefaultInstance();
            onChanged();
          } else {
            verticalNoiseBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder getVerticalNoiseBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getVerticalNoiseFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder getVerticalNoiseOrBuilder() {
          if (verticalNoiseBuilder_ != null) {
            return verticalNoiseBuilder_.getMessageOrBuilder();
          } else {
            return verticalNoise_;
          }
        }
        /**
         * <code>optional .gazebo.msgs.SensorNoise vertical_noise = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief Vertical noise
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder>
            getVerticalNoiseFieldBuilder() {
          if (verticalNoiseBuilder_ == null) {
            verticalNoiseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoise.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.SensorNoiseOrBuilder>(
                    getVerticalNoise(),
                    getParentForChildren(),
                    isClean());
            verticalNoise_ = null;
          }
          return verticalNoiseBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:gazebo.msgs.GPSSensor.Sensing)
      }

      static {
        defaultInstance = new Sensing(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:gazebo.msgs.GPSSensor.Sensing)
    }

    private int bitField0_;
    public static final int POSITION_FIELD_NUMBER = 1;
    private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing position_;
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getPosition() {
      return position_;
    }
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder getPositionOrBuilder() {
      return position_;
    }

    public static final int VELOCITY_FIELD_NUMBER = 2;
    private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing velocity_;
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    public boolean hasVelocity() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getVelocity() {
      return velocity_;
    }
    /**
     * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
     * / properties
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder getVelocityOrBuilder() {
      return velocity_;
    }

    private void initFields() {
      position_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
      velocity_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasPosition()) {
        if (!getPosition().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasVelocity()) {
        if (!getVelocity().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, velocity_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, position_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, velocity_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.GPSSensor}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.GPSSensor)
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Builder.class);
      }

      // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoGpsSensor.GPSSensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPositionFieldBuilder();
          getVelocityFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (positionBuilder_ == null) {
          position_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (velocityBuilder_ == null) {
          velocity_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
        } else {
          velocityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.internal_static_gazebo_msgs_GPSSensor_descriptor;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor getDefaultInstanceForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.getDefaultInstance();
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor build() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor buildPartial() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (velocityBuilder_ == null) {
          result.velocity_ = velocity_;
        } else {
          result.velocity_ = velocityBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor) {
          return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor other) {
        if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.getDefaultInstance()) return this;
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasVelocity()) {
          mergeVelocity(other.getVelocity());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasPosition()) {
          if (!getPosition().isInitialized()) {
            
            return false;
          }
        }
        if (hasVelocity()) {
          if (!getVelocity().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing position_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder> positionBuilder_;
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getPosition() {
        if (positionBuilder_ == null) {
          return position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder setPosition(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder setPosition(
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder mergePosition(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing value) {
        if (positionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              position_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance()) {
            position_ =
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
          onChanged();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder getPositionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_;
        }
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing position = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Position sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder>
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder>(
                  getPosition(),
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }

      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing velocity_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder> velocityBuilder_;
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public boolean hasVelocity() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing getVelocity() {
        if (velocityBuilder_ == null) {
          return velocity_;
        } else {
          return velocityBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder setVelocity(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing value) {
        if (velocityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          velocity_ = value;
          onChanged();
        } else {
          velocityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder setVelocity(
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder builderForValue) {
        if (velocityBuilder_ == null) {
          velocity_ = builderForValue.build();
          onChanged();
        } else {
          velocityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder mergeVelocity(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing value) {
        if (velocityBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              velocity_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance()) {
            velocity_ =
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.newBuilder(velocity_).mergeFrom(value).buildPartial();
          } else {
            velocity_ = value;
          }
          onChanged();
        } else {
          velocityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public Builder clearVelocity() {
        if (velocityBuilder_ == null) {
          velocity_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.getDefaultInstance();
          onChanged();
        } else {
          velocityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder getVelocityBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getVelocityFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder getVelocityOrBuilder() {
        if (velocityBuilder_ != null) {
          return velocityBuilder_.getMessageOrBuilder();
        } else {
          return velocity_;
        }
      }
      /**
       * <code>optional .gazebo.msgs.GPSSensor.Sensing velocity = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Velocity sensing. Consists of horizontal and vertical noise
       * / properties
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder>
          getVelocityFieldBuilder() {
        if (velocityBuilder_ == null) {
          velocityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.Sensing.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoGpsSensor.GPSSensor.SensingOrBuilder>(
                  getVelocity(),
                  getParentForChildren(),
                  isClean());
          velocity_ = null;
        }
        return velocityBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.GPSSensor)
    }

    static {
      defaultInstance = new GPSSensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.GPSSensor)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_GPSSensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_GPSSensor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_GPSSensor_Sensing_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_GPSSensor_Sensing_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020gps_sensor.proto\022\013gazebo.msgs\032\022sensor_" +
      "noise.proto\"\340\001\n\tGPSSensor\0220\n\010position\030\001 " +
      "\001(\0132\036.gazebo.msgs.GPSSensor.Sensing\0220\n\010v" +
      "elocity\030\002 \001(\0132\036.gazebo.msgs.GPSSensor.Se" +
      "nsing\032o\n\007Sensing\0222\n\020horizontal_noise\030\001 \001" +
      "(\0132\030.gazebo.msgs.SensorNoise\0220\n\016vertical" +
      "_noise\030\002 \001(\0132\030.gazebo.msgs.SensorNoiseB1" +
      "\n\037cn.autolabor.plugin.gazebo.msgsB\016Proto" +
      "GpsSensor"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.getDescriptor(),
        }, assigner);
    internal_static_gazebo_msgs_GPSSensor_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_GPSSensor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_GPSSensor_descriptor,
        new java.lang.String[] { "Position", "Velocity", });
    internal_static_gazebo_msgs_GPSSensor_Sensing_descriptor =
      internal_static_gazebo_msgs_GPSSensor_descriptor.getNestedTypes().get(0);
    internal_static_gazebo_msgs_GPSSensor_Sensing_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_GPSSensor_Sensing_descriptor,
        new java.lang.String[] { "HorizontalNoise", "VerticalNoise", });
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoSensorNoise.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
