// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: friction.proto

package cn.autolabor.plugin.gazebo.gazebomsgs;

public final class ProtoFriction {
  private ProtoFriction() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface FrictionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.Friction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional double mu = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Coefficient of friction in the range of [0..1].
     * </pre>
     */
    boolean hasMu();
    /**
     * <code>optional double mu = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Coefficient of friction in the range of [0..1].
     * </pre>
     */
    double getMu();

    /**
     * <code>optional double mu2 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
     * </pre>
     */
    boolean hasMu2();
    /**
     * <code>optional double mu2 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
     * </pre>
     */
    double getMu2();

    /**
     * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
     * </pre>
     */
    boolean hasFdir1();
    /**
     * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d getFdir1();
    /**
     * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3dOrBuilder getFdir1OrBuilder();

    /**
     * <code>optional double slip1 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    boolean hasSlip1();
    /**
     * <code>optional double slip1 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    double getSlip1();

    /**
     * <code>optional double slip2 = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    boolean hasSlip2();
    /**
     * <code>optional double slip2 = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    double getSlip2();

    /**
     * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Torsional friction.
     * </pre>
     */
    boolean hasTorsional();
    /**
     * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Torsional friction.
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional getTorsional();
    /**
     * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Torsional friction.
     * </pre>
     */
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder getTorsionalOrBuilder();
  }
  /**
   * Protobuf type {@code gazebo.msgs.Friction}
   */
  public static final class Friction extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.Friction)
      FrictionOrBuilder {
    // Use Friction.newBuilder() to construct.
    private Friction(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Friction(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Friction defaultInstance;
    public static Friction getDefaultInstance() {
      return defaultInstance;
    }

    public Friction getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Friction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              mu_ = input.readDouble();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              mu2_ = input.readDouble();
              break;
            }
            case 26: {
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = fdir1_.toBuilder();
              }
              fdir1_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fdir1_);
                fdir1_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              slip1_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              slip2_ = input.readDouble();
              break;
            }
            case 50: {
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = torsional_.toBuilder();
              }
              torsional_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(torsional_);
                torsional_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Builder.class);
    }

    public static com.google.protobuf.Parser<Friction> PARSER =
        new com.google.protobuf.AbstractParser<Friction>() {
      public Friction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Friction(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Friction> getParserForType() {
      return PARSER;
    }

    public interface TorsionalOrBuilder extends
        // @@protoc_insertion_point(interface_extends:gazebo.msgs.Friction.Torsional)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional double coefficient = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
       * </pre>
       */
      boolean hasCoefficient();
      /**
       * <code>optional double coefficient = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
       * </pre>
       */
      double getCoefficient();

      /**
       * <code>optional bool use_patch_radius = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief By default, torsional friction is calculated using the
       * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
       * / collision at the contact point (surface_radius) and "d" is the contact
       * / depth. If this flag is set to false, surface_radius and contact depth
       * / will be used instead of patch radius.
       * </pre>
       */
      boolean hasUsePatchRadius();
      /**
       * <code>optional bool use_patch_radius = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief By default, torsional friction is calculated using the
       * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
       * / collision at the contact point (surface_radius) and "d" is the contact
       * / depth. If this flag is set to false, surface_radius and contact depth
       * / will be used instead of patch radius.
       * </pre>
       */
      boolean getUsePatchRadius();

      /**
       * <code>optional double patch_radius = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
       * </pre>
       */
      boolean hasPatchRadius();
      /**
       * <code>optional double patch_radius = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
       * </pre>
       */
      double getPatchRadius();

      /**
       * <code>optional double surface_radius = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Surface radius on the point of contact, used for torsional
       * / friction.
       * </pre>
       */
      boolean hasSurfaceRadius();
      /**
       * <code>optional double surface_radius = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Surface radius on the point of contact, used for torsional
       * / friction.
       * </pre>
       */
      double getSurfaceRadius();

      /**
       * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
       * </pre>
       */
      boolean hasOde();
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
       * </pre>
       */
      cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE getOde();
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
       * </pre>
       */
      cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder getOdeOrBuilder();
    }
    /**
     * Protobuf type {@code gazebo.msgs.Friction.Torsional}
     */
    public static final class Torsional extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:gazebo.msgs.Friction.Torsional)
        TorsionalOrBuilder {
      // Use Torsional.newBuilder() to construct.
      private Torsional(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private Torsional(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final Torsional defaultInstance;
      public static Torsional getDefaultInstance() {
        return defaultInstance;
      }

      public Torsional getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private Torsional(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 9: {
                bitField0_ |= 0x00000001;
                coefficient_ = input.readDouble();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                usePatchRadius_ = input.readBool();
                break;
              }
              case 25: {
                bitField0_ |= 0x00000004;
                patchRadius_ = input.readDouble();
                break;
              }
              case 33: {
                bitField0_ |= 0x00000008;
                surfaceRadius_ = input.readDouble();
                break;
              }
              case 42: {
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder subBuilder = null;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                  subBuilder = ode_.toBuilder();
                }
                ode_ = input.readMessage(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(ode_);
                  ode_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000010;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder.class);
      }

      public static com.google.protobuf.Parser<Torsional> PARSER =
          new com.google.protobuf.AbstractParser<Torsional>() {
        public Torsional parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Torsional(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Torsional> getParserForType() {
        return PARSER;
      }

      public interface ODEOrBuilder extends
          // @@protoc_insertion_point(interface_extends:gazebo.msgs.Friction.Torsional.ODE)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <code>optional double slip = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Force dependent slip for torsional friction, between the range
         * / of [0..1].
         * </pre>
         */
        boolean hasSlip();
        /**
         * <code>optional double slip = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Force dependent slip for torsional friction, between the range
         * / of [0..1].
         * </pre>
         */
        double getSlip();
      }
      /**
       * Protobuf type {@code gazebo.msgs.Friction.Torsional.ODE}
       */
      public static final class ODE extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:gazebo.msgs.Friction.Torsional.ODE)
          ODEOrBuilder {
        // Use ODE.newBuilder() to construct.
        private ODE(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
          this.unknownFields = builder.getUnknownFields();
        }
        private ODE(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

        private static final ODE defaultInstance;
        public static ODE getDefaultInstance() {
          return defaultInstance;
        }

        public ODE getDefaultInstanceForType() {
          return defaultInstance;
        }

        private final com.google.protobuf.UnknownFieldSet unknownFields;
        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
            getUnknownFields() {
          return this.unknownFields;
        }
        private ODE(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          initFields();
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(input, unknownFields,
                                         extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 9: {
                  bitField0_ |= 0x00000001;
                  slip_ = input.readDouble();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e.getMessage()).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_ODE_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_ODE_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder.class);
        }

        public static com.google.protobuf.Parser<ODE> PARSER =
            new com.google.protobuf.AbstractParser<ODE>() {
          public ODE parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new ODE(input, extensionRegistry);
          }
        };

        @java.lang.Override
        public com.google.protobuf.Parser<ODE> getParserForType() {
          return PARSER;
        }

        private int bitField0_;
        public static final int SLIP_FIELD_NUMBER = 1;
        private double slip_;
        /**
         * <code>optional double slip = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Force dependent slip for torsional friction, between the range
         * / of [0..1].
         * </pre>
         */
        public boolean hasSlip() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional double slip = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Force dependent slip for torsional friction, between the range
         * / of [0..1].
         * </pre>
         */
        public double getSlip() {
          return slip_;
        }

        private void initFields() {
          slip_ = 0D;
        }
        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          getSerializedSize();
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeDouble(1, slip_);
          }
          getUnknownFields().writeTo(output);
        }

        private int memoizedSerializedSize = -1;
        public int getSerializedSize() {
          int size = memoizedSerializedSize;
          if (size != -1) return size;

          size = 0;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += com.google.protobuf.CodedOutputStream
              .computeDoubleSize(1, slip_);
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSerializedSize = size;
          return size;
        }

        private static final long serialVersionUID = 0L;
        @java.lang.Override
        protected java.lang.Object writeReplace()
            throws java.io.ObjectStreamException {
          return super.writeReplace();
        }

        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return PARSER.parseFrom(input);
        }
        public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() { return Builder.create(); }
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE prototype) {
          return newBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() { return newBuilder(this); }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code gazebo.msgs.Friction.Torsional.ODE}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:gazebo.msgs.Friction.Torsional.ODE)
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_ODE_descriptor;
          }

          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_ODE_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder.class);
          }

          // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoFriction.Friction.Torsional.ODE.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            }
          }
          private static Builder create() {
            return new Builder();
          }

          public Builder clear() {
            super.clear();
            slip_ = 0D;
            bitField0_ = (bitField0_ & ~0x00000001);
            return this;
          }

          public Builder clone() {
            return create().mergeFrom(buildPartial());
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_ODE_descriptor;
          }

          public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE getDefaultInstanceForType() {
            return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance();
          }

          public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE build() {
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE buildPartial() {
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
              to_bitField0_ |= 0x00000001;
            }
            result.slip_ = slip_;
            result.bitField0_ = to_bitField0_;
            onBuilt();
            return result;
          }

          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE) {
              return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE other) {
            if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance()) return this;
            if (other.hasSlip()) {
              setSlip(other.getSlip());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE) e.getUnfinishedMessage();
              throw e;
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }
          private int bitField0_;

          private double slip_ ;
          /**
           * <code>optional double slip = 1;</code>
           *
           * <pre>
           *&#47; &#92;brief Force dependent slip for torsional friction, between the range
           * / of [0..1].
           * </pre>
           */
          public boolean hasSlip() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
          }
          /**
           * <code>optional double slip = 1;</code>
           *
           * <pre>
           *&#47; &#92;brief Force dependent slip for torsional friction, between the range
           * / of [0..1].
           * </pre>
           */
          public double getSlip() {
            return slip_;
          }
          /**
           * <code>optional double slip = 1;</code>
           *
           * <pre>
           *&#47; &#92;brief Force dependent slip for torsional friction, between the range
           * / of [0..1].
           * </pre>
           */
          public Builder setSlip(double value) {
            bitField0_ |= 0x00000001;
            slip_ = value;
            onChanged();
            return this;
          }
          /**
           * <code>optional double slip = 1;</code>
           *
           * <pre>
           *&#47; &#92;brief Force dependent slip for torsional friction, between the range
           * / of [0..1].
           * </pre>
           */
          public Builder clearSlip() {
            bitField0_ = (bitField0_ & ~0x00000001);
            slip_ = 0D;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:gazebo.msgs.Friction.Torsional.ODE)
        }

        static {
          defaultInstance = new ODE(true);
          defaultInstance.initFields();
        }

        // @@protoc_insertion_point(class_scope:gazebo.msgs.Friction.Torsional.ODE)
      }

      private int bitField0_;
      public static final int COEFFICIENT_FIELD_NUMBER = 1;
      private double coefficient_;
      /**
       * <code>optional double coefficient = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
       * </pre>
       */
      public boolean hasCoefficient() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double coefficient = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
       * </pre>
       */
      public double getCoefficient() {
        return coefficient_;
      }

      public static final int USE_PATCH_RADIUS_FIELD_NUMBER = 2;
      private boolean usePatchRadius_;
      /**
       * <code>optional bool use_patch_radius = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief By default, torsional friction is calculated using the
       * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
       * / collision at the contact point (surface_radius) and "d" is the contact
       * / depth. If this flag is set to false, surface_radius and contact depth
       * / will be used instead of patch radius.
       * </pre>
       */
      public boolean hasUsePatchRadius() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool use_patch_radius = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief By default, torsional friction is calculated using the
       * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
       * / collision at the contact point (surface_radius) and "d" is the contact
       * / depth. If this flag is set to false, surface_radius and contact depth
       * / will be used instead of patch radius.
       * </pre>
       */
      public boolean getUsePatchRadius() {
        return usePatchRadius_;
      }

      public static final int PATCH_RADIUS_FIELD_NUMBER = 3;
      private double patchRadius_;
      /**
       * <code>optional double patch_radius = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
       * </pre>
       */
      public boolean hasPatchRadius() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double patch_radius = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
       * </pre>
       */
      public double getPatchRadius() {
        return patchRadius_;
      }

      public static final int SURFACE_RADIUS_FIELD_NUMBER = 4;
      private double surfaceRadius_;
      /**
       * <code>optional double surface_radius = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Surface radius on the point of contact, used for torsional
       * / friction.
       * </pre>
       */
      public boolean hasSurfaceRadius() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double surface_radius = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Surface radius on the point of contact, used for torsional
       * / friction.
       * </pre>
       */
      public double getSurfaceRadius() {
        return surfaceRadius_;
      }

      public static final int ODE_FIELD_NUMBER = 5;
      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE ode_;
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
       * </pre>
       */
      public boolean hasOde() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE getOde() {
        return ode_;
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder getOdeOrBuilder() {
        return ode_;
      }

      private void initFields() {
        coefficient_ = 0D;
        usePatchRadius_ = false;
        patchRadius_ = 0D;
        surfaceRadius_ = 0D;
        ode_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeDouble(1, coefficient_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeBool(2, usePatchRadius_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeDouble(3, patchRadius_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeDouble(4, surfaceRadius_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeMessage(5, ode_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(1, coefficient_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(2, usePatchRadius_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(3, patchRadius_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeDoubleSize(4, surfaceRadius_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, ode_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code gazebo.msgs.Friction.Torsional}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:gazebo.msgs.Friction.Torsional)
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder.class);
        }

        // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoFriction.Friction.Torsional.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getOdeFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          coefficient_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000001);
          usePatchRadius_ = false;
          bitField0_ = (bitField0_ & ~0x00000002);
          patchRadius_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000004);
          surfaceRadius_ = 0D;
          bitField0_ = (bitField0_ & ~0x00000008);
          if (odeBuilder_ == null) {
            ode_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance();
          } else {
            odeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_Torsional_descriptor;
        }

        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional getDefaultInstanceForType() {
          return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance();
        }

        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional build() {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional buildPartial() {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.coefficient_ = coefficient_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.usePatchRadius_ = usePatchRadius_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.patchRadius_ = patchRadius_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.surfaceRadius_ = surfaceRadius_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          if (odeBuilder_ == null) {
            result.ode_ = ode_;
          } else {
            result.ode_ = odeBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional) {
            return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional other) {
          if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance()) return this;
          if (other.hasCoefficient()) {
            setCoefficient(other.getCoefficient());
          }
          if (other.hasUsePatchRadius()) {
            setUsePatchRadius(other.getUsePatchRadius());
          }
          if (other.hasPatchRadius()) {
            setPatchRadius(other.getPatchRadius());
          }
          if (other.hasSurfaceRadius()) {
            setSurfaceRadius(other.getSurfaceRadius());
          }
          if (other.hasOde()) {
            mergeOde(other.getOde());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private double coefficient_ ;
        /**
         * <code>optional double coefficient = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
         * </pre>
         */
        public boolean hasCoefficient() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional double coefficient = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
         * </pre>
         */
        public double getCoefficient() {
          return coefficient_;
        }
        /**
         * <code>optional double coefficient = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
         * </pre>
         */
        public Builder setCoefficient(double value) {
          bitField0_ |= 0x00000001;
          coefficient_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double coefficient = 1;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional coefficient of friction in the range of [0..1].
         * </pre>
         */
        public Builder clearCoefficient() {
          bitField0_ = (bitField0_ & ~0x00000001);
          coefficient_ = 0D;
          onChanged();
          return this;
        }

        private boolean usePatchRadius_ ;
        /**
         * <code>optional bool use_patch_radius = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief By default, torsional friction is calculated using the
         * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
         * / collision at the contact point (surface_radius) and "d" is the contact
         * / depth. If this flag is set to false, surface_radius and contact depth
         * / will be used instead of patch radius.
         * </pre>
         */
        public boolean hasUsePatchRadius() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional bool use_patch_radius = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief By default, torsional friction is calculated using the
         * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
         * / collision at the contact point (surface_radius) and "d" is the contact
         * / depth. If this flag is set to false, surface_radius and contact depth
         * / will be used instead of patch radius.
         * </pre>
         */
        public boolean getUsePatchRadius() {
          return usePatchRadius_;
        }
        /**
         * <code>optional bool use_patch_radius = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief By default, torsional friction is calculated using the
         * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
         * / collision at the contact point (surface_radius) and "d" is the contact
         * / depth. If this flag is set to false, surface_radius and contact depth
         * / will be used instead of patch radius.
         * </pre>
         */
        public Builder setUsePatchRadius(boolean value) {
          bitField0_ |= 0x00000002;
          usePatchRadius_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional bool use_patch_radius = 2;</code>
         *
         * <pre>
         *&#47; &#92;brief By default, torsional friction is calculated using the
         * / "patch_radius", which is sqrt(R*d), where "R" is the radius of the
         * / collision at the contact point (surface_radius) and "d" is the contact
         * / depth. If this flag is set to false, surface_radius and contact depth
         * / will be used instead of patch radius.
         * </pre>
         */
        public Builder clearUsePatchRadius() {
          bitField0_ = (bitField0_ & ~0x00000002);
          usePatchRadius_ = false;
          onChanged();
          return this;
        }

        private double patchRadius_ ;
        /**
         * <code>optional double patch_radius = 3;</code>
         *
         * <pre>
         *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
         * </pre>
         */
        public boolean hasPatchRadius() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>optional double patch_radius = 3;</code>
         *
         * <pre>
         *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
         * </pre>
         */
        public double getPatchRadius() {
          return patchRadius_;
        }
        /**
         * <code>optional double patch_radius = 3;</code>
         *
         * <pre>
         *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
         * </pre>
         */
        public Builder setPatchRadius(double value) {
          bitField0_ |= 0x00000004;
          patchRadius_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double patch_radius = 3;</code>
         *
         * <pre>
         *&#47; &#92;brief Radius of contact patch surface, used for torsional friction.
         * </pre>
         */
        public Builder clearPatchRadius() {
          bitField0_ = (bitField0_ & ~0x00000004);
          patchRadius_ = 0D;
          onChanged();
          return this;
        }

        private double surfaceRadius_ ;
        /**
         * <code>optional double surface_radius = 4;</code>
         *
         * <pre>
         *&#47; &#92;brief Surface radius on the point of contact, used for torsional
         * / friction.
         * </pre>
         */
        public boolean hasSurfaceRadius() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>optional double surface_radius = 4;</code>
         *
         * <pre>
         *&#47; &#92;brief Surface radius on the point of contact, used for torsional
         * / friction.
         * </pre>
         */
        public double getSurfaceRadius() {
          return surfaceRadius_;
        }
        /**
         * <code>optional double surface_radius = 4;</code>
         *
         * <pre>
         *&#47; &#92;brief Surface radius on the point of contact, used for torsional
         * / friction.
         * </pre>
         */
        public Builder setSurfaceRadius(double value) {
          bitField0_ |= 0x00000008;
          surfaceRadius_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>optional double surface_radius = 4;</code>
         *
         * <pre>
         *&#47; &#92;brief Surface radius on the point of contact, used for torsional
         * / friction.
         * </pre>
         */
        public Builder clearSurfaceRadius() {
          bitField0_ = (bitField0_ & ~0x00000008);
          surfaceRadius_ = 0D;
          onChanged();
          return this;
        }

        private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE ode_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder> odeBuilder_;
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public boolean hasOde() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE getOde() {
          if (odeBuilder_ == null) {
            return ode_;
          } else {
            return odeBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public Builder setOde(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE value) {
          if (odeBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ode_ = value;
            onChanged();
          } else {
            odeBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public Builder setOde(
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder builderForValue) {
          if (odeBuilder_ == null) {
            ode_ = builderForValue.build();
            onChanged();
          } else {
            odeBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public Builder mergeOde(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE value) {
          if (odeBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                ode_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance()) {
              ode_ =
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.newBuilder(ode_).mergeFrom(value).buildPartial();
            } else {
              ode_ = value;
            }
            onChanged();
          } else {
            odeBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000010;
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public Builder clearOde() {
          if (odeBuilder_ == null) {
            ode_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.getDefaultInstance();
            onChanged();
          } else {
            odeBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000010);
          return this;
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder getOdeBuilder() {
          bitField0_ |= 0x00000010;
          onChanged();
          return getOdeFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder getOdeOrBuilder() {
          if (odeBuilder_ != null) {
            return odeBuilder_.getMessageOrBuilder();
          } else {
            return ode_;
          }
        }
        /**
         * <code>optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;</code>
         *
         * <pre>
         *&#47; &#92;brief Torsional friction information exclusive to ODE physics engine.
         * </pre>
         */
        private com.google.protobuf.SingleFieldBuilder<
            cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder>
            getOdeFieldBuilder() {
          if (odeBuilder_ == null) {
            odeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODE.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.ODEOrBuilder>(
                    getOde(),
                    getParentForChildren(),
                    isClean());
            ode_ = null;
          }
          return odeBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:gazebo.msgs.Friction.Torsional)
      }

      static {
        defaultInstance = new Torsional(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:gazebo.msgs.Friction.Torsional)
    }

    private int bitField0_;
    public static final int MU_FIELD_NUMBER = 1;
    private double mu_;
    /**
     * <code>optional double mu = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Coefficient of friction in the range of [0..1].
     * </pre>
     */
    public boolean hasMu() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional double mu = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Coefficient of friction in the range of [0..1].
     * </pre>
     */
    public double getMu() {
      return mu_;
    }

    public static final int MU2_FIELD_NUMBER = 2;
    private double mu2_;
    /**
     * <code>optional double mu2 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
     * </pre>
     */
    public boolean hasMu2() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double mu2 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
     * </pre>
     */
    public double getMu2() {
      return mu2_;
    }

    public static final int FDIR1_FIELD_NUMBER = 3;
    private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d fdir1_;
    /**
     * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
     * </pre>
     */
    public boolean hasFdir1() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d getFdir1() {
      return fdir1_;
    }
    /**
     * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3dOrBuilder getFdir1OrBuilder() {
      return fdir1_;
    }

    public static final int SLIP1_FIELD_NUMBER = 4;
    private double slip1_;
    /**
     * <code>optional double slip1 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    public boolean hasSlip1() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double slip1 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    public double getSlip1() {
      return slip1_;
    }

    public static final int SLIP2_FIELD_NUMBER = 5;
    private double slip2_;
    /**
     * <code>optional double slip2 = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    public boolean hasSlip2() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double slip2 = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
     * / the range of [0..1].
     * </pre>
     */
    public double getSlip2() {
      return slip2_;
    }

    public static final int TORSIONAL_FIELD_NUMBER = 6;
    private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional torsional_;
    /**
     * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Torsional friction.
     * </pre>
     */
    public boolean hasTorsional() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Torsional friction.
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional getTorsional() {
      return torsional_;
    }
    /**
     * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Torsional friction.
     * </pre>
     */
    public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder getTorsionalOrBuilder() {
      return torsional_;
    }

    private void initFields() {
      mu_ = 0D;
      mu2_ = 0D;
      fdir1_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.getDefaultInstance();
      slip1_ = 0D;
      slip2_ = 0D;
      torsional_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasFdir1()) {
        if (!getFdir1().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeDouble(1, mu_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, mu2_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, fdir1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, slip1_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, slip2_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, torsional_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, mu_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, mu2_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, fdir1_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, slip1_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, slip2_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, torsional_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.Friction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.Friction)
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.FrictionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.class, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Builder.class);
      }

      // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoFriction.Friction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFdir1FieldBuilder();
          getTorsionalFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        mu_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000001);
        mu2_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (fdir1Builder_ == null) {
          fdir1_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.getDefaultInstance();
        } else {
          fdir1Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        slip1_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        slip2_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (torsionalBuilder_ == null) {
          torsional_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance();
        } else {
          torsionalBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.internal_static_gazebo_msgs_Friction_descriptor;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction getDefaultInstanceForType() {
        return cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.getDefaultInstance();
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction build() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction buildPartial() {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction result = new cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.mu_ = mu_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.mu2_ = mu2_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (fdir1Builder_ == null) {
          result.fdir1_ = fdir1_;
        } else {
          result.fdir1_ = fdir1Builder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.slip1_ = slip1_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.slip2_ = slip2_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (torsionalBuilder_ == null) {
          result.torsional_ = torsional_;
        } else {
          result.torsional_ = torsionalBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction) {
          return mergeFrom((cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction other) {
        if (other == cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.getDefaultInstance()) return this;
        if (other.hasMu()) {
          setMu(other.getMu());
        }
        if (other.hasMu2()) {
          setMu2(other.getMu2());
        }
        if (other.hasFdir1()) {
          mergeFdir1(other.getFdir1());
        }
        if (other.hasSlip1()) {
          setSlip1(other.getSlip1());
        }
        if (other.hasSlip2()) {
          setSlip2(other.getSlip2());
        }
        if (other.hasTorsional()) {
          mergeTorsional(other.getTorsional());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasFdir1()) {
          if (!getFdir1().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private double mu_ ;
      /**
       * <code>optional double mu = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Coefficient of friction in the range of [0..1].
       * </pre>
       */
      public boolean hasMu() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional double mu = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Coefficient of friction in the range of [0..1].
       * </pre>
       */
      public double getMu() {
        return mu_;
      }
      /**
       * <code>optional double mu = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Coefficient of friction in the range of [0..1].
       * </pre>
       */
      public Builder setMu(double value) {
        bitField0_ |= 0x00000001;
        mu_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double mu = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Coefficient of friction in the range of [0..1].
       * </pre>
       */
      public Builder clearMu() {
        bitField0_ = (bitField0_ & ~0x00000001);
        mu_ = 0D;
        onChanged();
        return this;
      }

      private double mu2_ ;
      /**
       * <code>optional double mu2 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
       * </pre>
       */
      public boolean hasMu2() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double mu2 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
       * </pre>
       */
      public double getMu2() {
        return mu2_;
      }
      /**
       * <code>optional double mu2 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
       * </pre>
       */
      public Builder setMu2(double value) {
        bitField0_ |= 0x00000002;
        mu2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double mu2 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Second coefficient of friction in the range of [0..1].
       * </pre>
       */
      public Builder clearMu2() {
        bitField0_ = (bitField0_ & ~0x00000002);
        mu2_ = 0D;
        onChanged();
        return this;
      }

      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d fdir1_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3dOrBuilder> fdir1Builder_;
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public boolean hasFdir1() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d getFdir1() {
        if (fdir1Builder_ == null) {
          return fdir1_;
        } else {
          return fdir1Builder_.getMessage();
        }
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public Builder setFdir1(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d value) {
        if (fdir1Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fdir1_ = value;
          onChanged();
        } else {
          fdir1Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public Builder setFdir1(
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.Builder builderForValue) {
        if (fdir1Builder_ == null) {
          fdir1_ = builderForValue.build();
          onChanged();
        } else {
          fdir1Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public Builder mergeFdir1(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d value) {
        if (fdir1Builder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              fdir1_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.getDefaultInstance()) {
            fdir1_ =
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.newBuilder(fdir1_).mergeFrom(value).buildPartial();
          } else {
            fdir1_ = value;
          }
          onChanged();
        } else {
          fdir1Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public Builder clearFdir1() {
        if (fdir1Builder_ == null) {
          fdir1_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.getDefaultInstance();
          onChanged();
        } else {
          fdir1Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.Builder getFdir1Builder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getFdir1FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3dOrBuilder getFdir1OrBuilder() {
        if (fdir1Builder_ != null) {
          return fdir1Builder_.getMessageOrBuilder();
        } else {
          return fdir1_;
        }
      }
      /**
       * <code>optional .gazebo.msgs.Vector3d fdir1 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Direction of mu1 in the collision local reference frame.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3dOrBuilder>
          getFdir1FieldBuilder() {
        if (fdir1Builder_ == null) {
          fdir1Builder_ = new com.google.protobuf.SingleFieldBuilder<
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3d.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.Vector3dOrBuilder>(
                  getFdir1(),
                  getParentForChildren(),
                  isClean());
          fdir1_ = null;
        }
        return fdir1Builder_;
      }

      private double slip1_ ;
      /**
       * <code>optional double slip1 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public boolean hasSlip1() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double slip1 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public double getSlip1() {
        return slip1_;
      }
      /**
       * <code>optional double slip1 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public Builder setSlip1(double value) {
        bitField0_ |= 0x00000008;
        slip1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double slip1 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 1 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public Builder clearSlip1() {
        bitField0_ = (bitField0_ & ~0x00000008);
        slip1_ = 0D;
        onChanged();
        return this;
      }

      private double slip2_ ;
      /**
       * <code>optional double slip2 = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public boolean hasSlip2() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double slip2 = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public double getSlip2() {
        return slip2_;
      }
      /**
       * <code>optional double slip2 = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public Builder setSlip2(double value) {
        bitField0_ |= 0x00000010;
        slip2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double slip2 = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Force dependent slip direction 2 in collision local frame, between
       * / the range of [0..1].
       * </pre>
       */
      public Builder clearSlip2() {
        bitField0_ = (bitField0_ & ~0x00000010);
        slip2_ = 0D;
        onChanged();
        return this;
      }

      private cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional torsional_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder> torsionalBuilder_;
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public boolean hasTorsional() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional getTorsional() {
        if (torsionalBuilder_ == null) {
          return torsional_;
        } else {
          return torsionalBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public Builder setTorsional(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional value) {
        if (torsionalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          torsional_ = value;
          onChanged();
        } else {
          torsionalBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public Builder setTorsional(
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder builderForValue) {
        if (torsionalBuilder_ == null) {
          torsional_ = builderForValue.build();
          onChanged();
        } else {
          torsionalBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public Builder mergeTorsional(cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional value) {
        if (torsionalBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              torsional_ != cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance()) {
            torsional_ =
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.newBuilder(torsional_).mergeFrom(value).buildPartial();
          } else {
            torsional_ = value;
          }
          onChanged();
        } else {
          torsionalBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public Builder clearTorsional() {
        if (torsionalBuilder_ == null) {
          torsional_ = cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.getDefaultInstance();
          onChanged();
        } else {
          torsionalBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder getTorsionalBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTorsionalFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      public cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder getTorsionalOrBuilder() {
        if (torsionalBuilder_ != null) {
          return torsionalBuilder_.getMessageOrBuilder();
        } else {
          return torsional_;
        }
      }
      /**
       * <code>optional .gazebo.msgs.Friction.Torsional torsional = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Torsional friction.
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder>
          getTorsionalFieldBuilder() {
        if (torsionalBuilder_ == null) {
          torsionalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.Torsional.Builder, cn.autolabor.plugin.gazebo.gazebomsgs.ProtoFriction.Friction.TorsionalOrBuilder>(
                  getTorsional(),
                  getParentForChildren(),
                  isClean());
          torsional_ = null;
        }
        return torsionalBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.Friction)
    }

    static {
      defaultInstance = new Friction(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.Friction)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_Friction_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_Friction_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_Friction_Torsional_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_Friction_Torsional_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_Friction_Torsional_ODE_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_Friction_Torsional_ODE_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016friction.proto\022\013gazebo.msgs\032\016vector3d." +
      "proto\"\315\002\n\010Friction\022\n\n\002mu\030\001 \001(\001\022\013\n\003mu2\030\002 " +
      "\001(\001\022$\n\005fdir1\030\003 \001(\0132\025.gazebo.msgs.Vector3" +
      "d\022\r\n\005slip1\030\004 \001(\001\022\r\n\005slip2\030\005 \001(\001\0222\n\ttorsi" +
      "onal\030\006 \001(\0132\037.gazebo.msgs.Friction.Torsio" +
      "nal\032\257\001\n\tTorsional\022\023\n\013coefficient\030\001 \001(\001\022\030" +
      "\n\020use_patch_radius\030\002 \001(\010\022\024\n\014patch_radius" +
      "\030\003 \001(\001\022\026\n\016surface_radius\030\004 \001(\001\0220\n\003ode\030\005 " +
      "\001(\0132#.gazebo.msgs.Friction.Torsional.ODE" +
      "\032\023\n\003ODE\022\014\n\004slip\030\001 \001(\001B0\n\037cn.autolabor.pl",
      "ugin.gazebo.msgsB\rProtoFriction"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.getDescriptor(),
        }, assigner);
    internal_static_gazebo_msgs_Friction_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_Friction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_Friction_descriptor,
        new java.lang.String[] { "Mu", "Mu2", "Fdir1", "Slip1", "Slip2", "Torsional", });
    internal_static_gazebo_msgs_Friction_Torsional_descriptor =
      internal_static_gazebo_msgs_Friction_descriptor.getNestedTypes().get(0);
    internal_static_gazebo_msgs_Friction_Torsional_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_Friction_Torsional_descriptor,
        new java.lang.String[] { "Coefficient", "UsePatchRadius", "PatchRadius", "SurfaceRadius", "Ode", });
    internal_static_gazebo_msgs_Friction_Torsional_ODE_descriptor =
      internal_static_gazebo_msgs_Friction_Torsional_descriptor.getNestedTypes().get(0);
    internal_static_gazebo_msgs_Friction_Torsional_ODE_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_Friction_Torsional_ODE_descriptor,
        new java.lang.String[] { "Slip", });
    cn.autolabor.plugin.gazebo.gazebomsgs.ProtoVector3d.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
