// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_lens.proto

package cn.autolabor.plugin.gazebo.msgs;

public final class ProtoCameraLens {
  private ProtoCameraLens() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface CameraLensOrBuilder extends
      // @@protoc_insertion_point(interface_extends:gazebo.msgs.CameraLens)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required string type = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     */
    boolean hasType();
    /**
     * <code>required string type = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     */
    java.lang.String getType();
    /**
     * <code>required string type = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     */
    com.google.protobuf.ByteString
        getTypeBytes();

    /**
     * <code>optional double c1 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     */
    boolean hasC1();
    /**
     * <code>optional double c1 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     */
    double getC1();

    /**
     * <code>optional double c2 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     */
    boolean hasC2();
    /**
     * <code>optional double c2 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     */
    double getC2();

    /**
     * <code>optional double c3 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     */
    boolean hasC3();
    /**
     * <code>optional double c3 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     */
    double getC3();

    /**
     * <code>optional double f = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     */
    boolean hasF();
    /**
     * <code>optional double f = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     */
    double getF();

    /**
     * <code>optional string fun = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     */
    boolean hasFun();
    /**
     * <code>optional string fun = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     */
    java.lang.String getFun();
    /**
     * <code>optional string fun = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     */
    com.google.protobuf.ByteString
        getFunBytes();

    /**
     * <code>optional bool scale_to_hfov = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     */
    boolean hasScaleToHfov();
    /**
     * <code>optional bool scale_to_hfov = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     */
    boolean getScaleToHfov();

    /**
     * <code>optional double cutoff_angle = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     */
    boolean hasCutoffAngle();
    /**
     * <code>optional double cutoff_angle = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     */
    double getCutoffAngle();

    /**
     * <code>optional double hfov = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    boolean hasHfov();
    /**
     * <code>optional double hfov = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    double getHfov();

    /**
     * <code>optional int32 env_texture_size = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     */
    boolean hasEnvTextureSize();
    /**
     * <code>optional int32 env_texture_size = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     */
    int getEnvTextureSize();
  }
  /**
   * Protobuf type {@code gazebo.msgs.CameraLens}
   */
  public static final class CameraLens extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:gazebo.msgs.CameraLens)
      CameraLensOrBuilder {
    // Use CameraLens.newBuilder() to construct.
    private CameraLens(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CameraLens(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CameraLens defaultInstance;
    public static CameraLens getDefaultInstance() {
      return defaultInstance;
    }

    public CameraLens getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CameraLens(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000001;
              type_ = bs;
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              c1_ = input.readDouble();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              c2_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              c3_ = input.readDouble();
              break;
            }
            case 41: {
              bitField0_ |= 0x00000010;
              f_ = input.readDouble();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              fun_ = bs;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              scaleToHfov_ = input.readBool();
              break;
            }
            case 65: {
              bitField0_ |= 0x00000080;
              cutoffAngle_ = input.readDouble();
              break;
            }
            case 73: {
              bitField0_ |= 0x00000100;
              hfov_ = input.readDouble();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              envTextureSize_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.internal_static_gazebo_msgs_CameraLens_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.internal_static_gazebo_msgs_CameraLens_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.class, cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.Builder.class);
    }

    public static com.google.protobuf.Parser<CameraLens> PARSER =
        new com.google.protobuf.AbstractParser<CameraLens>() {
      public CameraLens parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CameraLens(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CameraLens> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private java.lang.Object type_;
    /**
     * <code>required string type = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string type = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     */
    public java.lang.String getType() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          type_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string type = 1;</code>
     *
     * <pre>
     *&#47; &#92;brief Type of projection of the lens
     * /        possible values are "gnomonical", "stereographic", "equidistant",
     * /        "equisolid_angle", "stereographic", "custom".
     * /        If you set this value to "custom" you need to specify at least one
     * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      java.lang.Object ref = type_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int C1_FIELD_NUMBER = 2;
    private double c1_;
    /**
     * <code>optional double c1 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     */
    public boolean hasC1() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional double c1 = 2;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear image scaling factor
     * </pre>
     */
    public double getC1() {
      return c1_;
    }

    public static final int C2_FIELD_NUMBER = 3;
    private double c2_;
    /**
     * <code>optional double c2 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     */
    public boolean hasC2() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional double c2 = 3;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle scaling factor
     * </pre>
     */
    public double getC2() {
      return c2_;
    }

    public static final int C3_FIELD_NUMBER = 4;
    private double c3_;
    /**
     * <code>optional double c3 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     */
    public boolean hasC3() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional double c3 = 4;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle offset factor
     * </pre>
     */
    public double getC3() {
      return c3_;
    }

    public static final int F_FIELD_NUMBER = 5;
    private double f_;
    /**
     * <code>optional double f = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     */
    public boolean hasF() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional double f = 5;</code>
     *
     * <pre>
     *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
     * /        if scale_to_fov is set to `true`.
     * </pre>
     */
    public double getF() {
      return f_;
    }

    public static final int FUN_FIELD_NUMBER = 6;
    private java.lang.Object fun_;
    /**
     * <code>optional string fun = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     */
    public boolean hasFun() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string fun = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     */
    public java.lang.String getFun() {
      java.lang.Object ref = fun_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          fun_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string fun = 6;</code>
     *
     * <pre>
     *&#47; &#92;brief Angle modification function
     *         possible values are "tan", "sin" and "id".
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFunBytes() {
      java.lang.Object ref = fun_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fun_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCALE_TO_HFOV_FIELD_NUMBER = 7;
    private boolean scaleToHfov_;
    /**
     * <code>optional bool scale_to_hfov = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     */
    public boolean hasScaleToHfov() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool scale_to_hfov = 7;</code>
     *
     * <pre>
     *&#47; &#92;brief Scale image to fit horizontal FOV
     * </pre>
     */
    public boolean getScaleToHfov() {
      return scaleToHfov_;
    }

    public static final int CUTOFF_ANGLE_FIELD_NUMBER = 8;
    private double cutoffAngle_;
    /**
     * <code>optional double cutoff_angle = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     */
    public boolean hasCutoffAngle() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional double cutoff_angle = 8;</code>
     *
     * <pre>
     *&#47; &#92;brief Everything outside of this angle will be hidden,
     * /        the angle is counted from camera's X (forward) axis.
     * </pre>
     */
    public double getCutoffAngle() {
      return cutoffAngle_;
    }

    public static final int HFOV_FIELD_NUMBER = 9;
    private double hfov_;
    /**
     * <code>optional double hfov = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    public boolean hasHfov() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional double hfov = 9;</code>
     *
     * <pre>
     *&#47; &#92;brief Horizontal field of view in radians.
     * </pre>
     */
    public double getHfov() {
      return hfov_;
    }

    public static final int ENV_TEXTURE_SIZE_FIELD_NUMBER = 10;
    private int envTextureSize_;
    /**
     * <code>optional int32 env_texture_size = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     */
    public boolean hasEnvTextureSize() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 env_texture_size = 10;</code>
     *
     * <pre>
     *&#47; &#92;brief Size of cube map texture,
     * /        used to store intermediate rendering result.
     * </pre>
     */
    public int getEnvTextureSize() {
      return envTextureSize_;
    }

    private void initFields() {
      type_ = "";
      c1_ = 0D;
      c2_ = 0D;
      c3_ = 0D;
      f_ = 0D;
      fun_ = "";
      scaleToHfov_ = false;
      cutoffAngle_ = 0D;
      hfov_ = 0D;
      envTextureSize_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeDouble(2, c1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, c2_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, c3_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeDouble(5, f_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getFunBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, scaleToHfov_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeDouble(8, cutoffAngle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeDouble(9, hfov_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, envTextureSize_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getTypeBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, c1_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, c2_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, c3_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(5, f_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getFunBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, scaleToHfov_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(8, cutoffAngle_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(9, hfov_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, envTextureSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code gazebo.msgs.CameraLens}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:gazebo.msgs.CameraLens)
        cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLensOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.internal_static_gazebo_msgs_CameraLens_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.internal_static_gazebo_msgs_CameraLens_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.class, cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.Builder.class);
      }

      // Construct using cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        c1_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000002);
        c2_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        c3_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        f_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000010);
        fun_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        scaleToHfov_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        cutoffAngle_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000080);
        hfov_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000100);
        envTextureSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.internal_static_gazebo_msgs_CameraLens_descriptor;
      }

      public cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens getDefaultInstanceForType() {
        return cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.getDefaultInstance();
      }

      public cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens build() {
        cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens buildPartial() {
        cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens result = new cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.c1_ = c1_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.c2_ = c2_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.c3_ = c3_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.f_ = f_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.fun_ = fun_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.scaleToHfov_ = scaleToHfov_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.cutoffAngle_ = cutoffAngle_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.hfov_ = hfov_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.envTextureSize_ = envTextureSize_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens) {
          return mergeFrom((cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens other) {
        if (other == cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens.getDefaultInstance()) return this;
        if (other.hasType()) {
          bitField0_ |= 0x00000001;
          type_ = other.type_;
          onChanged();
        }
        if (other.hasC1()) {
          setC1(other.getC1());
        }
        if (other.hasC2()) {
          setC2(other.getC2());
        }
        if (other.hasC3()) {
          setC3(other.getC3());
        }
        if (other.hasF()) {
          setF(other.getF());
        }
        if (other.hasFun()) {
          bitField0_ |= 0x00000020;
          fun_ = other.fun_;
          onChanged();
        }
        if (other.hasScaleToHfov()) {
          setScaleToHfov(other.getScaleToHfov());
        }
        if (other.hasCutoffAngle()) {
          setCutoffAngle(other.getCutoffAngle());
        }
        if (other.hasHfov()) {
          setHfov(other.getHfov());
        }
        if (other.hasEnvTextureSize()) {
          setEnvTextureSize(other.getEnvTextureSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cn.autolabor.plugin.gazebo.msgs.ProtoCameraLens.CameraLens) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object type_ = "";
      /**
       * <code>required string type = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string type = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       */
      public java.lang.String getType() {
        java.lang.Object ref = type_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            type_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>required string type = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       */
      public com.google.protobuf.ByteString
          getTypeBytes() {
        java.lang.Object ref = type_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          type_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string type = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       */
      public Builder setType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string type = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = getDefaultInstance().getType();
        onChanged();
        return this;
      }
      /**
       * <code>required string type = 1;</code>
       *
       * <pre>
       *&#47; &#92;brief Type of projection of the lens
       * /        possible values are "gnomonical", "stereographic", "equidistant",
       * /        "equisolid_angle", "stereographic", "custom".
       * /        If you set this value to "custom" you need to specify at least one
       * /        of the `c1`, `c2`, `c3`, `f` or `fun`.
       * </pre>
       */
      public Builder setTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }

      private double c1_ ;
      /**
       * <code>optional double c1 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       */
      public boolean hasC1() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional double c1 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       */
      public double getC1() {
        return c1_;
      }
      /**
       * <code>optional double c1 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       */
      public Builder setC1(double value) {
        bitField0_ |= 0x00000002;
        c1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double c1 = 2;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear image scaling factor
       * </pre>
       */
      public Builder clearC1() {
        bitField0_ = (bitField0_ & ~0x00000002);
        c1_ = 0D;
        onChanged();
        return this;
      }

      private double c2_ ;
      /**
       * <code>optional double c2 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       */
      public boolean hasC2() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional double c2 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       */
      public double getC2() {
        return c2_;
      }
      /**
       * <code>optional double c2 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       */
      public Builder setC2(double value) {
        bitField0_ |= 0x00000004;
        c2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double c2 = 3;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle scaling factor
       * </pre>
       */
      public Builder clearC2() {
        bitField0_ = (bitField0_ & ~0x00000004);
        c2_ = 0D;
        onChanged();
        return this;
      }

      private double c3_ ;
      /**
       * <code>optional double c3 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       */
      public boolean hasC3() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional double c3 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       */
      public double getC3() {
        return c3_;
      }
      /**
       * <code>optional double c3 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       */
      public Builder setC3(double value) {
        bitField0_ |= 0x00000008;
        c3_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double c3 = 4;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle offset factor
       * </pre>
       */
      public Builder clearC3() {
        bitField0_ = (bitField0_ & ~0x00000008);
        c3_ = 0D;
        onChanged();
        return this;
      }

      private double f_ ;
      /**
       * <code>optional double f = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       */
      public boolean hasF() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional double f = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       */
      public double getF() {
        return f_;
      }
      /**
       * <code>optional double f = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       */
      public Builder setF(double value) {
        bitField0_ |= 0x00000010;
        f_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double f = 5;</code>
       *
       * <pre>
       *&#47; &#92;brief Linear scaling factor, unlike `c1`, will be adjusted to match hfov
       * /        if scale_to_fov is set to `true`.
       * </pre>
       */
      public Builder clearF() {
        bitField0_ = (bitField0_ & ~0x00000010);
        f_ = 0D;
        onChanged();
        return this;
      }

      private java.lang.Object fun_ = "";
      /**
       * <code>optional string fun = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       */
      public boolean hasFun() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string fun = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       */
      public java.lang.String getFun() {
        java.lang.Object ref = fun_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            fun_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string fun = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       */
      public com.google.protobuf.ByteString
          getFunBytes() {
        java.lang.Object ref = fun_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fun_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string fun = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       */
      public Builder setFun(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        fun_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string fun = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       */
      public Builder clearFun() {
        bitField0_ = (bitField0_ & ~0x00000020);
        fun_ = getDefaultInstance().getFun();
        onChanged();
        return this;
      }
      /**
       * <code>optional string fun = 6;</code>
       *
       * <pre>
       *&#47; &#92;brief Angle modification function
       *         possible values are "tan", "sin" and "id".
       * </pre>
       */
      public Builder setFunBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        fun_ = value;
        onChanged();
        return this;
      }

      private boolean scaleToHfov_ ;
      /**
       * <code>optional bool scale_to_hfov = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       */
      public boolean hasScaleToHfov() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool scale_to_hfov = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       */
      public boolean getScaleToHfov() {
        return scaleToHfov_;
      }
      /**
       * <code>optional bool scale_to_hfov = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       */
      public Builder setScaleToHfov(boolean value) {
        bitField0_ |= 0x00000040;
        scaleToHfov_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool scale_to_hfov = 7;</code>
       *
       * <pre>
       *&#47; &#92;brief Scale image to fit horizontal FOV
       * </pre>
       */
      public Builder clearScaleToHfov() {
        bitField0_ = (bitField0_ & ~0x00000040);
        scaleToHfov_ = false;
        onChanged();
        return this;
      }

      private double cutoffAngle_ ;
      /**
       * <code>optional double cutoff_angle = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       */
      public boolean hasCutoffAngle() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional double cutoff_angle = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       */
      public double getCutoffAngle() {
        return cutoffAngle_;
      }
      /**
       * <code>optional double cutoff_angle = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       */
      public Builder setCutoffAngle(double value) {
        bitField0_ |= 0x00000080;
        cutoffAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double cutoff_angle = 8;</code>
       *
       * <pre>
       *&#47; &#92;brief Everything outside of this angle will be hidden,
       * /        the angle is counted from camera's X (forward) axis.
       * </pre>
       */
      public Builder clearCutoffAngle() {
        bitField0_ = (bitField0_ & ~0x00000080);
        cutoffAngle_ = 0D;
        onChanged();
        return this;
      }

      private double hfov_ ;
      /**
       * <code>optional double hfov = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public boolean hasHfov() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional double hfov = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public double getHfov() {
        return hfov_;
      }
      /**
       * <code>optional double hfov = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public Builder setHfov(double value) {
        bitField0_ |= 0x00000100;
        hfov_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional double hfov = 9;</code>
       *
       * <pre>
       *&#47; &#92;brief Horizontal field of view in radians.
       * </pre>
       */
      public Builder clearHfov() {
        bitField0_ = (bitField0_ & ~0x00000100);
        hfov_ = 0D;
        onChanged();
        return this;
      }

      private int envTextureSize_ ;
      /**
       * <code>optional int32 env_texture_size = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       */
      public boolean hasEnvTextureSize() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 env_texture_size = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       */
      public int getEnvTextureSize() {
        return envTextureSize_;
      }
      /**
       * <code>optional int32 env_texture_size = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       */
      public Builder setEnvTextureSize(int value) {
        bitField0_ |= 0x00000200;
        envTextureSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 env_texture_size = 10;</code>
       *
       * <pre>
       *&#47; &#92;brief Size of cube map texture,
       * /        used to store intermediate rendering result.
       * </pre>
       */
      public Builder clearEnvTextureSize() {
        bitField0_ = (bitField0_ & ~0x00000200);
        envTextureSize_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:gazebo.msgs.CameraLens)
    }

    static {
      defaultInstance = new CameraLens(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:gazebo.msgs.CameraLens)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_gazebo_msgs_CameraLens_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_gazebo_msgs_CameraLens_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021camera_lens.proto\022\013gazebo.msgs\"\253\001\n\nCam" +
      "eraLens\022\014\n\004type\030\001 \002(\t\022\n\n\002c1\030\002 \001(\001\022\n\n\002c2\030" +
      "\003 \001(\001\022\n\n\002c3\030\004 \001(\001\022\t\n\001f\030\005 \001(\001\022\013\n\003fun\030\006 \001(" +
      "\t\022\025\n\rscale_to_hfov\030\007 \001(\010\022\024\n\014cutoff_angle" +
      "\030\010 \001(\001\022\014\n\004hfov\030\t \001(\001\022\030\n\020env_texture_size" +
      "\030\n \001(\005B2\n\037cn.autolabor.plugin.gazebo.msg" +
      "sB\017ProtoCameraLens"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_gazebo_msgs_CameraLens_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_gazebo_msgs_CameraLens_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_gazebo_msgs_CameraLens_descriptor,
        new java.lang.String[] { "Type", "C1", "C2", "C3", "F", "Fun", "ScaleToHfov", "CutoffAngle", "Hfov", "EnvTextureSize", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
